apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ .Values.service.name }}"
  labels:
    app: "{{ .Values.service.name }}"
spec:
  serviceName: "{{ .Values.service.name }}"
  replicas: {{ .Values.service.replicaCount }}
  selector:
    matchLabels:
      app: "{{ .Values.service.name }}"
  template:
    metadata:
      labels:
        app: "{{ .Values.service.name }}"
    spec:
      serviceAccountName: "{{ .Values.service.name }}-sa"
      containers:
      - name: "{{ .Values.service.name }}"
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: "{{ .Values.image.pull }}"
        ports:
        - containerPort: {{ .Values.service.port }}
        securityContext:
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsGroup: {{ .Values.securityContext.runAsGroup }}
          fsGroup: {{ .Values.securityContext.fsGroup }}
        env:
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.service.name }}-secret"
              key: MYSQL_USER
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.service.name }}-secret"
              key: MYSQL_PASSWORD
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.service.name }}-secret"
              key: MYSQL_ROOT_PASSWORD
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: "{{ .Values.service.name }}-secret"
              key: MYSQL_DATABASE
        volumeMounts:
        - name: "{{ .Values.service.name }}-persistent-storage"
          mountPath: "{{ .Values.persistence.mountPath }}"
      volumes:
      - name: "{{ .Values.service.name }}-persistent-storage"
        persistentVolumeClaim:
          claimName: "{{ .Values.persistence.claim }}"